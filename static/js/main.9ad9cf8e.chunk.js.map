{"version":3,"sources":["App/Teleprompter/HeaderBar/index.tsx","App/Teleprompter/TeleprompterText/index.tsx","App/Teleprompter/index.tsx","App/index.tsx","serviceWorker.ts","index.tsx","App/Teleprompter/TeleprompterText/TextScroller.module.css","App/Teleprompter/App.module.css"],"names":["useStyles","makeStyles","theme","createStyles","appBar","background","palette","default","githubLink","color","getInputValue","input","Array","isArray","length","Error","text","speed","textSize","onTextChange","flipX","onSpeedChange","onTextSizeChange","onFlipXChange","onStartRequest","onFullscreenRequest","styles","AppBar","component","position","className","Grid","container","spacing","justify","alignItems","item","FormControlLabel","control","TextField","placeholder","value","onChange","event","currentTarget","label","Description","Slider","min","max","step","style","width","FastForward","TextFields","transform","Switch","checked","SwapHoriz","Button","onClick","variant","Fullscreen","Link","href","target","rel","GitHub","fontSize","height","onNumVisibleLinesChange","displayTextRef","useRef","useLayoutEffect","numLines","from","current","getClientRects","filter","r","y","classNames","displayTextContainer","displayText","ref","useState","setText","setTextSize","scrollSpeed","setScrollSpeed","setFlipX","numVisibleLines","setNumVisibleLines","scrollPosition","useWindowScrollPosition","requestFullScreen","a","screenfull","isEnabled","request","app","HeaderBar","lineScrollDurationMs","Scroll","animateScroll","scrollToBottom","duration","isDynamic","offset","smooth","TeleprompterText","createMuiTheme","type","ThemeProvider","CssBaseline","Teleprompter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.9ad9cf8e.chunk.js","sourcesContent":["import React, {ChangeEvent} from 'react'\nimport {\n  AppBar,\n  Button,\n  createStyles,\n  FormControlLabel,\n  Grid,\n  Link,\n  Slider,\n  Switch,\n  TextField,\n  Theme\n} from '@material-ui/core'\nimport {Description, FastForward, Fullscreen, GitHub, SwapHoriz, TextFields} from '@material-ui/icons'\nimport {makeStyles} from '@material-ui/core/styles'\n\ninterface HeaderBarProps {\n  readonly text?: string\n  readonly speed?: number\n  readonly textSize?: number\n  readonly flipX?: boolean\n  readonly onTextChange?: {(text: string): void}\n  readonly onSpeedChange?: {(speed: number): void}\n  readonly onTextSizeChange?: {(textSize: number): void}\n  readonly onFlipXChange?: {(flipX: boolean): void}\n  readonly onStartRequest?: {(): void}\n  readonly onFullscreenRequest?: {(): void}\n}\n\nconst useStyles = makeStyles(\n  (theme: Theme) => createStyles({\n    appBar: {\n      background: theme.palette.background.default\n    },\n    githubLink: {\n      color: 'white',\n      '&:hover': {\n        color: 'lightgrey'\n      }\n    }\n  }))\n\nfunction getInputValue(input: number | number[]): number {\n  if (Array.isArray(input)) {\n    if (input.length === 1) {\n      return input[0]\n    }\n    throw Error('Array must have exactly one element')\n  }\n  return input\n}\n\nexport default function({text = '', speed = .5, textSize = .5, flipX = false, onTextChange, onSpeedChange, onTextSizeChange, onFlipXChange, onStartRequest, onFullscreenRequest}: HeaderBarProps) {\n  const styles = useStyles()\n\n  const onTextInputChange = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => onTextChange?.(event.currentTarget.value)\n  const onFontSizeInputChange = (event: ChangeEvent<{}>, value: number | number[]) => onTextSizeChange?.(getInputValue(value))\n  const onScrollSpeedInputChange = (event: ChangeEvent<{}>, value: number | number[]) => onSpeedChange?.(getInputValue(value))\n  const onFlipXSwitchChange = (event: ChangeEvent<HTMLInputElement>) => onFlipXChange?.(event.currentTarget.checked)\n\n  return <AppBar component='header' position='fixed' className={styles.appBar}>\n    <Grid container spacing={4} justify='center' alignItems='center'>\n      <Grid item>\n        <FormControlLabel control={<TextField placeholder='Enter script.' value={text} onChange={onTextInputChange}/>}\n                          label={<Description/>}/>\n      </Grid>\n      <Grid item>\n        <FormControlLabel control={<Slider min={0} max={1} step={0.01} value={speed}\n                                           onChange={onScrollSpeedInputChange} style={{width: '8em'}}/>}\n                          label={<FastForward/>}/>\n      </Grid>\n      <Grid item>\n        <FormControlLabel\n          control={<Slider min={0} max={1} step={0.01} value={textSize} onChange={onFontSizeInputChange}\n                           style={{width: '8em'}}/>}\n          label={<TextFields style={{transform: 'scaleX(-1)'}}/>}/>\n      </Grid>\n      <Grid item>\n        <FormControlLabel control={<Switch onChange={onFlipXSwitchChange}/>}\n                          label={<SwapHoriz/>}/>\n      </Grid>\n      <Grid item>\n        <Button onClick={onStartRequest} variant='outlined'>Start</Button>\n      </Grid>\n      <Grid item>\n        <Button onClick={onFullscreenRequest} variant='outlined'><Fullscreen/></Button>\n      </Grid>\n      <Grid item>\n        <Link\n          href='https://github.com/kevinhwang/teleprompter'\n          target='_blank'\n          rel='noopener noreferrer'\n          className={styles.githubLink}>\n          <GitHub/>\n        </Link>\n      </Grid>\n    </Grid>\n  </AppBar>\n}\n","import classNames from 'classnames'\nimport React, {RefObject, useLayoutEffect, useRef} from 'react'\nimport styles from './TextScroller.module.css'\n\ninterface TeleprompterTextProps {\n  readonly text?: string\n  readonly fontSize?: string\n  readonly flipX?: boolean\n  readonly width?: string\n  readonly height?: string\n  readonly onNumVisibleLinesChange?: {(numLines: number): void}\n}\n\nexport default function({text = '', fontSize = 'xx-large', flipX = false, width = 'auto', height = 'auto', onNumVisibleLinesChange}: TeleprompterTextProps) {\n  const displayTextRef: RefObject<HTMLParagraphElement> = useRef(null)\n\n  useLayoutEffect(() => {\n    const numLines: number = Array.from(displayTextRef?.current?.getClientRects()!)\n      .filter(r => r.y >= 0)\n      .length\n    onNumVisibleLinesChange?.(numLines)\n  })\n\n  return <div className={classNames(styles.displayTextContainer, {[styles.flipX]: flipX})}\n              style={{width: width, height: height}}>\n    <p className={styles.displayText}\n       style={{fontSize: fontSize}}\n       ref={displayTextRef}>\n      {text}\n    </p>\n  </div>\n}\n","import React, {useState} from 'react'\nimport useWindowScrollPosition from '@rehooks/window-scroll-position'\nimport Scroll from 'react-scroll'\nimport screenfull from 'screenfull'\n\nimport styles from './App.module.css'\nimport HeaderBar from './HeaderBar'\nimport TeleprompterText from './TeleprompterText'\n\n\nexport default function() {\n  const [text, setText] = useState('')\n  const [textSize, setTextSize] = useState(.5)\n  const [scrollSpeed, setScrollSpeed] = useState(.5)\n  const [flipX, setFlipX] = useState(false)\n  const [numVisibleLines, setNumVisibleLines] = useState(0)\n\n  const scrollPosition = useWindowScrollPosition()\n\n  const scrollToBottom = () => {\n    const lineScrollDurationMs = 8000 * (1 - scrollSpeed) + 192\n\n    Scroll.animateScroll.scrollToBottom({\n      duration: lineScrollDurationMs * numVisibleLines,\n      isDynamic: true,\n      offset: scrollPosition,\n      smooth: 'linear'\n    })\n  }\n\n  const requestFullScreen = async () => {\n    if (screenfull.isEnabled) {\n      await screenfull.request()\n    }\n  }\n\n  return <div className={styles.app}>\n    <HeaderBar text={text} textSize={textSize} speed={scrollSpeed} flipX={flipX} onTextChange={setText}\n               onTextSizeChange={setTextSize} onSpeedChange={setScrollSpeed} onFlipXChange={setFlipX}\n               onStartRequest={scrollToBottom} onFullscreenRequest={requestFullScreen}/>\n    <TeleprompterText\n      text={text}\n      fontSize={`${(10 * textSize) + 2}em`}\n      flipX={flipX}\n      onNumVisibleLinesChange={setNumVisibleLines}/>\n  </div>\n}\n","import React from 'react'\nimport {createMuiTheme, CssBaseline, ThemeProvider} from '@material-ui/core'\nimport Teleprompter from './Teleprompter'\n\nconst theme = createMuiTheme({palette: {type: 'dark'}})\n\nexport default () => <ThemeProvider theme={theme}>\n  <CssBaseline>\n    <Teleprompter/>\n  </CssBaseline>\n</ThemeProvider>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.getElementById('root'))\nserviceWorker.register()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayText\":\"TextScroller_displayText__1eQ17\",\"displayTextContainer\":\"TextScroller_displayTextContainer__2_vYQ\",\"flipX\":\"TextScroller_flipX__3Qb7g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__26_DA\"};"],"sourceRoot":""}